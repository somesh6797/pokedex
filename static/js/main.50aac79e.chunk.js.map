{"version":3,"sources":["Components/PokeCard.js","App.js","serviceWorker.js","index.js"],"names":["PokeCard","console","log","arr","this","props","pokemon","url","split","index","length","imgUrl","className","name","src","height","alt","Component","App","nextHandle","fetch","state","pokemonData","next","then","responce","json","data","setState","prevHandle","previous","limit","pokemons","results","map","onClick","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"8MA0BeA,G,yLArBbC,QAAQC,IAAI,Y,+BAGZ,IAAIC,EAAMC,KAAKC,MAAMC,QAAQC,IAAIC,MAAM,KACvCJ,KAAKK,MAAQN,EAAIA,EAAIO,OAAS,GAC9B,IAAIC,EACH,iDAAmDP,KAAKK,MAAQ,OACjE,OACC,qBAAKG,UAAU,OAAf,SACC,qBAAKA,UAAU,YAAf,SACC,sBAAKA,UAAU,OAAf,UACC,6BAAKR,KAAKC,MAAMC,QAAQO,OACxB,qBAAKC,IAAKH,EAAQI,OAAO,KAAKC,IAAI,kBAClC,qBAAKJ,UAAU,oB,GAfEK,cCoERC,E,kDAlEd,WAAYb,GAAQ,IAAD,8BAClB,cAAMA,IAmBPc,WAAa,WACZC,MAAM,EAAKC,MAAMC,YAAYC,MAC3BC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OACL,EAAKC,UAAS,WACb,MAAO,CAAEN,YAAaK,UAzBP,EA8BnBE,WAAa,WACR,EAAKR,MAAMC,YAAYQ,WAC1B7B,QAAQC,IAAI,EAAKmB,MAAMC,YAAYQ,UACnCV,MAAM,EAAKC,MAAMC,YAAYQ,UAC3BN,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OACL,EAAKC,UAAS,WACb,MAAO,CAAEN,YAAaK,WAlC1B,EAAKI,MAAQ,EACb,EAAKV,MAAQ,CACZC,YAAa,GACbf,IAAK,qDAAuD,EAAKwB,OANhD,E,gEAUE,IAAD,OACnBX,MAAMhB,KAAKiB,MAAMd,KACfiB,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OACL,EAAKC,UAAS,WACb,MAAO,CAAEN,YAAaK,W,+BA6BzB,IAAIK,EAMJ,OALI5B,KAAKiB,MAAMC,YAAYW,UAC1BD,EAAW5B,KAAKiB,MAAMC,YAAYW,QAAQC,KAAI,SAAC5B,EAASG,GACvD,OAAO,cAAC,EAAD,CAAUH,QAASA,GAAcG,OAIzC,sBAAKG,UAAU,UAAf,UACC,qBAAKA,UAAU,MAAf,SAAsBoB,IACtB,uBACA,wBAAQG,QAAS/B,KAAKyB,WAAtB,kBACA,wBAAQM,QAAS/B,KAAKe,WAAtB,kBACA,8B,GAzDcF,aCQEmB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACR,cAAC,IAAMC,WAAP,UACC,cAAC,EAAD,MAEDC,SAASC,eAAe,SDyHnB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLnD,QAAQmD,MAAMA,EAAMC,a","file":"static/js/main.50aac79e.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../App.css\";\r\n\r\nclass PokeCard extends Component {\r\n\tcomponentWillUpdate() {\r\n\t\tconsole.log(\"object\");\r\n\t}\r\n\trender() {\r\n\t\tlet arr = this.props.pokemon.url.split(\"/\");\r\n\t\tthis.index = arr[arr.length - 2];\r\n\t\tlet imgUrl =\r\n\t\t\t\"https://pokeres.bastionbot.org/images/pokemon/\" + this.index + \".png\";\r\n\t\treturn (\r\n\t\t\t<div className=\"wrap\">\r\n\t\t\t\t<div className=\"container\">\r\n\t\t\t\t\t<div className=\"card\">\r\n\t\t\t\t\t\t<h3>{this.props.pokemon.name}</h3>\r\n\t\t\t\t\t\t<img src={imgUrl} height=\"80\" alt=\"Not Availbale\" />\r\n\t\t\t\t\t\t<div className=\"open\"></div>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default PokeCard;\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport PokeCard from \"./Components/PokeCard\";\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.limit = 3;\n\t\tthis.state = {\n\t\t\tpokemonData: [],\n\t\t\turl: \"https://pokeapi.co/api/v2/pokemon/?offset=0&limit=\" + this.limit,\n\t\t};\n\t}\n\n\tcomponentDidMount() {\n\t\tfetch(this.state.url)\n\t\t\t.then((responce) => responce.json())\n\t\t\t.then((data) =>\n\t\t\t\tthis.setState(() => {\n\t\t\t\t\treturn { pokemonData: data };\n\t\t\t\t})\n\t\t\t);\n\t}\n\n\tnextHandle = () => {\n\t\tfetch(this.state.pokemonData.next)\n\t\t\t.then((responce) => responce.json())\n\t\t\t.then((data) =>\n\t\t\t\tthis.setState(() => {\n\t\t\t\t\treturn { pokemonData: data };\n\t\t\t\t})\n\t\t\t);\n\t};\n\n\tprevHandle = () => {\n\t\tif (this.state.pokemonData.previous) {\n\t\t\tconsole.log(this.state.pokemonData.previous);\n\t\t\tfetch(this.state.pokemonData.previous)\n\t\t\t\t.then((responce) => responce.json())\n\t\t\t\t.then((data) =>\n\t\t\t\t\tthis.setState(() => {\n\t\t\t\t\t\treturn { pokemonData: data };\n\t\t\t\t\t})\n\t\t\t\t);\n\t\t}\n\t};\n\n\trender() {\n\t\tlet pokemons;\n\t\tif (this.state.pokemonData.results) {\n\t\t\tpokemons = this.state.pokemonData.results.map((pokemon, index) => {\n\t\t\t\treturn <PokeCard pokemon={pokemon} key={index} />;\n\t\t\t});\n\t\t}\n\t\treturn (\n\t\t\t<div className=\"appWrap\">\n\t\t\t\t<div className=\"App\">{pokemons}</div>\n\t\t\t\t<br />\n\t\t\t\t<button onClick={this.prevHandle}>Prev</button>\n\t\t\t\t<button onClick={this.nextHandle}>Next</button>\n\t\t\t\t<br />\n\t\t\t</div>\n\t\t);\n\t}\n}\n// names https://pokeapi.co/api/v2/pokemon?limit=151\n// Detailed Info https://pokeapi.co/api/v2/pokemon/5/\n//  For images only https://pokeres.bastionbot.org/images/pokemon/1.png\n//\"https://pokeapi.co/api/v2/pokemon?offset=40&limit=20\"\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}